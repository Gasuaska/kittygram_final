name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt
      - run: |
          python -m flake8 backend/
          cd backend
          python manage.py test
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432

  build_backend_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: gasuaska/kittygram_backend:latest

  build_frontend_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: gasuaska/kittygram_frontend:latest

  build_gateway_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: gasuaska/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push
      - build_frontend_and_push
      - build_gateway_and_push
    steps:
      - uses: actions/checkout@v3
      - uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SECRET_SSH }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "kittygram"
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SECRET_SSH }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd kittygram
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml down
            docker compose -f docker-compose.production.yml up -d
            docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            docker compose -f docker-compose.production.yml exec backend mkdir -p /backend_static/static
            docker compose -f docker-compose.production.yml exec backend mkdir -p /app/media
            docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ✅ ${{ github.actor }} запушил Kittygram: ${{ github.event.commits[0].message }}